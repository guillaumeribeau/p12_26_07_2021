{"ast":null,"code":"var _jsxFileName = \"/Users/guillaume/desktop-tutorial/p12_26_07_2021/src/components/RadarPerformance.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { PolarRadiusAxis, PolarGrid, PolarAngleAxis, Radar, Legend, RadarChart, ResponsiveContainer } from \"recharts\";\nimport useFetch from \"./FetchDating\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dataTest = [{\n  value: 80,\n  kind: 1\n}, {\n  value: 120,\n  kind: 2\n}, {\n  value: 140,\n  kind: 3\n}, {\n  value: 50,\n  kind: 4\n}, {\n  value: 200,\n  kind: 5\n}, {\n  value: 90,\n  kind: 6\n}];\n\nconst displayIntensityPerformance = data => {\n  let value = \"\";\n\n  switch (data.kind) {\n    case 1:\n      value = \"Cardio\";\n      break;\n\n    case 2:\n      value = \"Energie\";\n      break;\n\n    case 3:\n      value = \"Endurance\";\n      break;\n\n    case 4:\n      value = \"Force\";\n      break;\n\n    case 5:\n      value = \"Vitesse\";\n      break;\n\n    case 6:\n      value = \"Intensité\";\n      break;\n\n    default:\n      value = \"\";\n  }\n\n  return value;\n};\n\nconst RadarPerformance = () => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const [loading, dataPerformance] = useFetch(`http://localhost:3000/user/${id}/performance`);\n\n  if (loading) {\n    /*#__PURE__*/\n    _jsxDEV(\"div\", {\n      children: \"Chargement...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"radar_performance_container\",\n    children: dataPerformance && /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: \"100%\",\n      children: /*#__PURE__*/_jsxDEV(RadarChart, {\n        cx: \"50%\",\n        cy: \"50%\",\n        outerRadius: \"70%\",\n        data: data,\n        children: [/*#__PURE__*/_jsxDEV(PolarGrid, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(PolarAngleAxis, {\n          dataKey: displayIntensityPerformance,\n          stroke: \"#fff\",\n          tickLine: false,\n          tick: {\n            fontSize: 10\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Radar, {\n          dataKey: \"value\",\n          stroke: \"#ff0101\",\n          fill: \"#ff0101\",\n          fillOpacity: 0.7\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RadarPerformance, \"R4F07kUTAe2hKn6K1Xxk58cS/GA=\", false, function () {\n  return [useParams, useFetch];\n});\n\n_c = RadarPerformance;\nexport default RadarPerformance;\n\nvar _c;\n\n$RefreshReg$(_c, \"RadarPerformance\");","map":{"version":3,"sources":["/Users/guillaume/desktop-tutorial/p12_26_07_2021/src/components/RadarPerformance.jsx"],"names":["React","useParams","PolarRadiusAxis","PolarGrid","PolarAngleAxis","Radar","Legend","RadarChart","ResponsiveContainer","useFetch","dataTest","value","kind","displayIntensityPerformance","data","RadarPerformance","id","loading","dataPerformance","fontSize"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport {\n  PolarRadiusAxis,\n  PolarGrid,\n  PolarAngleAxis,\n  Radar,\n  Legend,\n  RadarChart,\n  ResponsiveContainer,\n} from \"recharts\";\nimport useFetch from \"./FetchDating\";\n\nconst dataTest = [\n  {\n    value: 80,\n    kind: 1,\n  },\n  {\n    value: 120,\n    kind: 2,\n  },\n  {\n    value: 140,\n    kind: 3,\n  },\n  {\n    value: 50,\n    kind: 4,\n  },\n  {\n    value: 200,\n    kind: 5,\n  },\n  {\n    value: 90,\n    kind: 6,\n  },\n];\n\nconst displayIntensityPerformance = (data) => {\n  let value = \"\";\n  switch (data.kind) {\n    case 1:\n      value= \"Cardio\";\n\n      break;\n    case 2:\n      value= \"Energie\";\n\n      break;\n    case 3: \n      value= \"Endurance\";\n\n      break;\n    case 4:\n      value= \"Force\";\n\n      break;\n    case 5:\n      value=\"Vitesse\";\n\n      break;\n\n    case 6:\n      value =\"Intensité\";\n\n      break;\n\n    default:\n      value = \"\";\n  }\n  return value;\n};\n\nconst RadarPerformance = () => {\n    const {id}= useParams();\n  const [loading, dataPerformance] = useFetch( `http://localhost:3000/user/${id}/performance`\n  );\n \n  if (loading) {\n    <div>Chargement...</div>;\n  }\n\n  return (\n    <div className=\"radar_performance_container\">\n       {dataPerformance && (\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <RadarChart cx=\"50%\" cy=\"50%\" outerRadius=\"70%\" data={data}>\n              <PolarGrid />\n              <PolarAngleAxis\n                dataKey={displayIntensityPerformance}\n                stroke=\"#fff\"\n                tickLine={false}\n                tick={{ fontSize: 10 }}\n              />\n              <Radar\n                dataKey=\"value\"\n                stroke=\"#ff0101\"\n                fill=\"#ff0101\"\n                fillOpacity={0.7}\n              />\n            </RadarChart>\n          </ResponsiveContainer>\n        )}\n    </div>\n  );\n};\n\nexport default RadarPerformance;\n"]},"metadata":{},"sourceType":"module"}