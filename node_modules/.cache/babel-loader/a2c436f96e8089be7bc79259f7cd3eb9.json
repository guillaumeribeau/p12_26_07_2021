{"ast":null,"code":"var _jsxFileName = \"/Users/guillaume/desktop-tutorial/p12_26_07_2021/src/components/RadarPerformance.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { PolarRadiusAxis, PolarGrid, PolarAngleAxis, Radar, Legend, RadarChart, ResponsiveContainer } from \"recharts\";\nimport useFetch from \"./FetchDating\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dataTest = [{\n  value: 80,\n  kind: 1\n}, {\n  value: 120,\n  kind: 2\n}, {\n  value: 140,\n  kind: 3\n}, {\n  value: 50,\n  kind: 4\n}, {\n  value: 200,\n  kind: 5\n}, {\n  value: 90,\n  kind: 6\n}];\n\nconst displayIntensityPerformance = data => {\n  let value = \"\";\n\n  switch (data.kind) {\n    case 1:\n      value = \"Cardio\";\n      break;\n\n    case 2:\n      value = \"Energie\";\n      break;\n\n    case 3:\n      value = \"Endurance\";\n      break;\n\n    case 4:\n      value = \"Force\";\n      break;\n\n    case 5:\n      value = \"Vitesse\";\n      break;\n\n    case 6:\n      value = \"Intensité\";\n      break;\n\n    default:\n      value = \"\";\n  }\n\n  return value;\n};\n\nconst RadarPerformance = () => {\n  _s();\n\n  const [loading, dataPerformance] = useFetch(\"http://localhost:3000/user/12/performance\");\n\n  if (loading) {\n    /*#__PURE__*/\n    _jsxDEV(\"div\", {\n      children: \"Chargement...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"radar_performance_container\",\n    children: /*#__PURE__*/_jsxDEV(RadarChart, {\n      outerRadius: 90,\n      width: 190,\n      height: 250,\n      data: dataTest,\n      children: [/*#__PURE__*/_jsxDEV(PolarGrid, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PolarAngleAxis, {\n        dataKey: displayIntensityPerformance,\n        fill: \"#FFFFFF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PolarRadiusAxis, {\n        angle: 30\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Radar, {\n        dataKey: \"value\",\n        stroke: \"transparent\",\n        fill: \"#FF0101B2\",\n        fillOpacity: 0.7\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RadarPerformance, \"tRHE8u1e2UqkXJf7GHKM+p9an3Y=\", false, function () {\n  return [useFetch];\n});\n\n_c = RadarPerformance;\nexport default RadarPerformance;\n\nvar _c;\n\n$RefreshReg$(_c, \"RadarPerformance\");","map":{"version":3,"sources":["/Users/guillaume/desktop-tutorial/p12_26_07_2021/src/components/RadarPerformance.jsx"],"names":["React","PolarRadiusAxis","PolarGrid","PolarAngleAxis","Radar","Legend","RadarChart","ResponsiveContainer","useFetch","dataTest","value","kind","displayIntensityPerformance","data","RadarPerformance","loading","dataPerformance"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,eADF,EAEEC,SAFF,EAGEC,cAHF,EAIEC,KAJF,EAKEC,MALF,EAMEC,UANF,EAOEC,mBAPF,QAQO,UARP;AASA,OAAOC,QAAP,MAAqB,eAArB;;AAEA,MAAMC,QAAQ,GAAG,CACf;AACEC,EAAAA,KAAK,EAAE,EADT;AAEEC,EAAAA,IAAI,EAAE;AAFR,CADe,EAKf;AACED,EAAAA,KAAK,EAAE,GADT;AAEEC,EAAAA,IAAI,EAAE;AAFR,CALe,EASf;AACED,EAAAA,KAAK,EAAE,GADT;AAEEC,EAAAA,IAAI,EAAE;AAFR,CATe,EAaf;AACED,EAAAA,KAAK,EAAE,EADT;AAEEC,EAAAA,IAAI,EAAE;AAFR,CAbe,EAiBf;AACED,EAAAA,KAAK,EAAE,GADT;AAEEC,EAAAA,IAAI,EAAE;AAFR,CAjBe,EAqBf;AACED,EAAAA,KAAK,EAAE,EADT;AAEEC,EAAAA,IAAI,EAAE;AAFR,CArBe,CAAjB;;AA2BA,MAAMC,2BAA2B,GAAIC,IAAD,IAAU;AAC5C,MAAIH,KAAK,GAAG,EAAZ;;AACA,UAAQG,IAAI,CAACF,IAAb;AACE,SAAK,CAAL;AACED,MAAAA,KAAK,GAAE,QAAP;AAEA;;AACF,SAAK,CAAL;AACEA,MAAAA,KAAK,GAAC,SAAN;AAEA;;AACF,SAAK,CAAL;AACEA,MAAAA,KAAK,GAAC,WAAN;AAEA;;AACF,SAAK,CAAL;AACEA,MAAAA,KAAK,GAAG,OAAR;AAEA;;AACF,SAAK,CAAL;AACEA,MAAAA,KAAK,GAAG,SAAR;AAEA;;AAEF,SAAK,CAAL;AACEA,MAAAA,KAAK,GAAG,WAAR;AAEA;;AAEF;AACEA,MAAAA,KAAK,GAAG,EAAR;AA5BJ;;AA8BA,SAAOA,KAAP;AACD,CAjCD;;AAmCA,MAAMI,gBAAgB,GAAG,MAAM;AAAA;;AAC7B,QAAM,CAACC,OAAD,EAAUC,eAAV,IAA6BR,QAAQ,CACzC,2CADyC,CAA3C;;AAIA,MAAIO,OAAJ,EAAa;AACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,6BAAf;AAAA,2BACE,QAAC,UAAD;AAAY,MAAA,WAAW,EAAE,EAAzB;AAA6B,MAAA,KAAK,EAAE,GAApC;AAAyC,MAAA,MAAM,EAAE,GAAjD;AAAsD,MAAA,IAAI,EAAEN,QAA5D;AAAA,8BACE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,cAAD;AAAgB,QAAA,OAAO,EAAEG,2BAAzB;AAAsD,QAAA,IAAI,EAAC;AAA3D;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,eAAD;AAAiB,QAAA,KAAK,EAAE;AAAxB;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE,QAAC,KAAD;AACE,QAAA,OAAO,EAAC,OADV;AAEE,QAAA,MAAM,EAAC,aAFT;AAGE,QAAA,IAAI,EAAC,WAHP;AAIE,QAAA,WAAW,EAAE;AAJf;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAxBD;;GAAME,gB;UAC+BN,Q;;;KAD/BM,gB;AA0BN,eAAeA,gBAAf","sourcesContent":["import React from \"react\";\nimport {\n  PolarRadiusAxis,\n  PolarGrid,\n  PolarAngleAxis,\n  Radar,\n  Legend,\n  RadarChart,\n  ResponsiveContainer,\n} from \"recharts\";\nimport useFetch from \"./FetchDating\";\n\nconst dataTest = [\n  {\n    value: 80,\n    kind: 1,\n  },\n  {\n    value: 120,\n    kind: 2,\n  },\n  {\n    value: 140,\n    kind: 3,\n  },\n  {\n    value: 50,\n    kind: 4,\n  },\n  {\n    value: 200,\n    kind: 5,\n  },\n  {\n    value: 90,\n    kind: 6,\n  },\n];\n\nconst displayIntensityPerformance = (data) => {\n  let value = \"\";\n  switch (data.kind) {\n    case 1:\n      value =\"Cardio\";\n\n      break;\n    case 2:\n      value=\"Energie\";\n\n      break;\n    case 3:\n      value=\"Endurance\";\n\n      break;\n    case 4:\n      value = \"Force\";\n\n      break;\n    case 5:\n      value = \"Vitesse\";\n\n      break;\n\n    case 6:\n      value = \"Intensité\";\n\n      break;\n\n    default:\n      value = \"\";\n  }\n  return value;\n};\n\nconst RadarPerformance = () => {\n  const [loading, dataPerformance] = useFetch(\n    \"http://localhost:3000/user/12/performance\"\n  );\n\n  if (loading) {\n    <div>Chargement...</div>;\n  }\n\n  return (\n    <div className=\"radar_performance_container\">\n      <RadarChart outerRadius={90} width={190} height={250} data={dataTest}>\n        <PolarGrid />\n        <PolarAngleAxis dataKey={displayIntensityPerformance} fill=\"#FFFFFF\" />\n        <PolarRadiusAxis angle={30} />\n        <Radar\n          dataKey=\"value\"\n          stroke=\"transparent\"\n          fill=\"#FF0101B2\"\n          fillOpacity={0.7}\n        />\n      </RadarChart>\n    </div>\n  );\n};\n\nexport default RadarPerformance;\n"]},"metadata":{},"sourceType":"module"}